# Deployment Information
pods_status:
  main_pods_running: 3 # (10 including Grafana and Prometheus pods)
  canary_pods_running: 1

# Service Information
service_endpoints:
  main_service_cluster_ip: 10.101.51.148
  canary_service_cluster_ip: 10.104.146.209

# Ingress Information
ingress_details:
  address: 192.168.49.2
  host: canary-demo.local # (studious-yodel-5ggwp467qqg424v7-8081.app.github.dev via the CodeSpace)

# Metrics
main_deployment_metrics:
  http_requests_total: 29.0
  process_cpu_seconds_total: 0.48000000000000004
  process_resident_memory_bytes: 3.2628736e+07

canary_deployment_metrics:
  http_requests_total: 2.0
  process_cpu_seconds_total: 0.27
  process_resident_memory_bytes: 3.0060544e+07

# Traffic Distribution Test
traffic_test_results:
  total_requests_sent: 20 # (Did 2 more tests of 20 each)
  main_responses_received: 14 # (17 and 17 for the two additional tests)
  canary_responses_received: 6 # (3 and 3 for the two additional tests)
  actual_canary_percentage: 30% # (15% and 15% for the two additional tests)

# Prometheus Queries
prometheus_metrics:
  main_request_rate: empty
  canary_request_rate: empty

# Rollback Test
rollback_test:
  previous_revision: 1
  rollback_command_used: helm rollback canary-demo 1 -n canary-demo
  time_to_rollback_seconds: <1s

# Error Budget Calculation (based on 99.9% SLO)
error_budget:
  monthly_error_budget_seconds: 2592.00
  remaining_error_budget_percentage: 100.00%

# Additional Observations
observations:
  unexpected_behaviors: >
    Was expecting the traffic to be evenly split between the two deployments but the distribution seemed to fluctuate
    Was not expecting rate(http_requests_total) to come back empty when querying prometheus
  suggested_improvements: Might be good to include a gotcha and fix for missing Prometheus metrics